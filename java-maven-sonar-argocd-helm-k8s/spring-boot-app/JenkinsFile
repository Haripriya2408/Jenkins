pipeline {
  agent {
    docker {
      image 'harivelu/jenkins-maven-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  stages {
    stage('Clean Workspace') {
      steps {
        cleanWs()
      }
    }
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/Haripriya2408/Jenkins.git'
      }
    }
    stage('Diagnostic Information') {
      steps {
        sh 'pwd'
        sh 'ls -R'
        sh 'echo "Maven version:"; mvn --version'
        sh 'echo "Java version:"; java -version'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'pwd'
        sh 'ls -l java-maven-sonar-argocd-helm-k8s/spring-boot-app'
        sh 'test -f java-maven-sonar-argocd-helm-k8s/spring-boot-app/pom.xml || echo "pom.xml not found"'
        sh '''
          cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
          mvn clean package
        '''
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://54.174.78.21:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar \
              -Dsonar.projectKey=com.abhishek:spring-boot-demo \
              -Dsonar.host.url=${SONAR_URL} \
              -Dsonar.login=$SONAR_AUTH_TOKEN
          '''
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "harivelu/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
          '''
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "Jenkins"
        GIT_USER_NAME = "Haripriya2408"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "haripriyaveluchamy@gmail.com"
            git config user.name "Haripriya2408"
            BUILD_NUMBER=${BUILD_NUMBER}
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }
  post {
    always {
      sh 'docker logout'
    }
  }
}
